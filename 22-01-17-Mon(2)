#include <iostream>

using namespace std;

class Person {
private:
	int age;	
	string name;

public:
	Person() : Person(0, "")
	{
		/*cout << "사람 탄생" << endl;*/
		// 코드 중복 -> 생성자를 생성자안에 세팅할수 있음
		// 생성자가 오버로딩 됬을때 생성자끼리 위임할수 있음
	}

	Person(int age, string name) :
		age(age),
		name(name)
	{
		cout << "사람 탄생" << endl;
	} 

	// 소멸자 - 객체가 사라질때, 마무리하는 작업
	~Person() {
		cout << "사람이 사라집니다" << endl;
	}

	void introduce() {
		cout << name << ", " << age << endl;
	}
};

class DataStore {
private : 
	// int datas[100];
	int* datas; // 동적할당을 위해 주소로 선언
	int i;
public :

	DataStore() :
		i(0)
	{
		datas = new int[100];
	}
	
	// 소멸자의 역할 -> 객체 안에서 동적할당 된 메모리를 해제하기 위해 만듬
	~DataStore() {
		delete datas; // 생성자 안에 선언된 동적할당을 소멸하면서 같이 지움
		cout << "객체가 사라집니다" << endl;
	}

	void setData(int data) {
		datas[i++] = data;
	}

	int getData(int index) {
		return datas[index];
	}
};

int main() {
	
	DataStore ds;
	
	DataStore* ds2 = new DataStore();

	ds.setData(1);
	ds.setData(2);
	ds.setData(3);

	ds2->setData(1);
	ds2->setData(2);
	ds2->setData(3);

	int rst = ds.getData(1);
	int rst2 = ds2->getData(2);

	cout << rst << endl;
	cout << rst2 << endl;

	delete ds2;
	
	return 0;
}
